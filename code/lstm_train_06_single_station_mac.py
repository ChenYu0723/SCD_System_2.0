# -*- coding: utf-8 -*-
# @Time    : 2020/2/8 20:28
# @Author  : Chen Yu

import os
import pandas as pd
import numpy as np
import torch
from torch import nn
from torch.autograd import Variable
import torch.nn.functional as F
import torch.utils.data as Data
import matplotlib.pyplot as plt
from utils import *
from datetime import datetime
# 每个station单独训练model，epoch后测试剩余样本的指标，记录所有站点指标
# 这个文件是单独输出某个站点迭代训练过程中的mape变化
plt.rcParams['font.sans-serif'] = ['SimHei']
path = os.path.abspath('..')

pd.set_option('display.width',1000)
pd.set_option('display.max_rows',1000)
pd.set_option('display.max_columns',500)


def mape(y_pred, y_true):
    y_pred = np.array(y_pred)
    y_true = np.array(y_true)
    m = np.mean(np.abs((y_true - y_pred)/(y_true + 1e-3))) * 100
    return m


def mae(y_pred, y_true):
    y_pred = np.array(y_pred)
    y_true = np.array(y_true)
    m = np.mean(np.abs(y_true - y_pred))
    return m


def toV(x):
    tmp = torch.FloatTensor(x)
    return Variable(tmp)


class LSTM(nn.Module):
    def __init__(self, input_size, hidden_size, output_size=1, num_layers=2):
        super(LSTM, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers)
        self.out = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        x, _ = self.lstm(x)
        s, b, h = x.shape
        x = x.view(s*b, h)
        x = self.out(x)
        x = x.view(s, b, -1)
        return x


def main(STATION_ID):
    print('reading data ...')
    infile = path + '/data/raw_data/metroData_ODflow_15.csv'
    raw_flow = pd.read_csv(infile)
    # print(raw_flow)

    # ==== only train one station model ====
    station_flow = raw_flow[raw_flow[' station'] == STATION_ID]
    # print(station_flow)
    # ====

    trainData_x, trainData_y = trainDataGen(station_flow, N_TS, N_DAY, N_WEEK)
    # trainData_xy = np.array([trainData_x, trainData_y])
    # trainData_xy_no, mao, mio = MaxMinNorm(trainData_xy)
    trainData_x, mao_x, mio_x = MaxMinNorm(trainData_x)
    trainData_y, mao_y, mio_y = MaxMinNorm(trainData_y)

    # trainData_x = trainData_xy_no[0]
    # trainData_y = trainData_xy_no[1]

    trainData_x = toV(trainData_x).view(len(trainData_x),1,N_TS+N_DAY+N_WEEK)
    trainData_y = toV(trainData_y).view(len(trainData_y),1,1)
    # print(trainData_x, len(trainData_x))
    # print(trainData_y, len(trainData_y))
    lll = len(trainData_x)
    train_x = trainData_x[:int(0.75*lll)]  # 60*64*322
    train_y = trainData_y[:int(0.75*lll)]
    # print(train_x, len(train_x))
    # print(train_y, len(train_y))
    test_x = trainData_x[int(0.75*lll):]
    test_y = trainData_y[int(0.75*lll):]

    num_train = len(train_x)

    trainData_set = Data.TensorDataset(train_x, train_y)
    trainData_loader = Data.DataLoader(
        dataset=trainData_set,
        batch_size=BATCH_SIZE,
        shuffle=False,
        num_workers=2
    )

    testData_set = Data.TensorDataset(test_x, test_y)
    testData_loader = Data.DataLoader(
        dataset=testData_set,
        batch_size=BATCH_SIZE_TEST,
        shuffle=False,
        num_workers=2
    )


    lstm = LSTM(N_TS+N_DAY+N_WEEK, 10)
    loss_func = nn.MSELoss()
    optimizer = torch.optim.Adam(lstm.parameters(), lr=LR)

    # ==== train
    print('training data ...')
    mape_all_ls = []
    mape_test_all_ls = []
    for epoch in range(EPOCH):
        print('epoch:', epoch+1)
        mape_epoch_ls = []
        for step, (batch_x, batch_y) in enumerate(trainData_loader):
            outs = lstm(batch_x)
            loss = loss_func(outs, batch_y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            if (step+1) % 100 == 0:
                print(' step:', step+1, 'all:', int(num_train/BATCH_SIZE))

            y_pred = MaxMinNorm_re(outs, mao_y, mio_y).view(-1).data
            y_true = MaxMinNorm_re(batch_y, mao_y, mio_y).view(-1).data
            mape_step = mape(y_pred, y_true)
            mape_epoch_ls.append(mape_step)
        mape_all_ls.append(np.mean(mape_epoch_ls))
        if (epoch+1) % 10 == 0:
            print('epoch: {}, loss: {:.5f}'.format(epoch+1, loss.item()))

        for step_test, (batch_x_test, batch_y_test) in enumerate(testData_loader):
            outs_test = lstm(batch_x_test)
            y_pred_test = MaxMinNorm_re(outs_test, mao_y, mio_y).view(-1).data
            y_true_test = MaxMinNorm_re(batch_y_test, mao_y, mio_y).view(-1).data
            mape_step_test = mape(y_pred_test, y_true_test)
            mape_test_all_ls.append(mape_step_test)
            break

    # ==== test
    # pred_outs = lstm(test_x)
    # pred_outs = MaxMinNorm_re(pred_outs, mao_y, mio_y).view(-1).data
    # test_y = MaxMinNorm_re(test_y, mao_y, mio_y).view(-1).data
    #
    # rmse_sta, mae_sta, mape_sta, acc_sta = evaluation(test_y, pred_outs)
    #
    # print('station id:', STATION_ID, 'rmse:', rmse_sta)
    # print('station id:', STATION_ID, 'mae:', mae_sta)
    # print('station id:', STATION_ID, 'mape:', mape_sta)
    # print('station id:', STATION_ID, 'acc:', acc_sta)


    # plt.plot(range(1, EPOCH+1), mape_all_ls, c='r', label='Training Mape')  # ls='--', marker='^',
    # plt.plot(range(1, EPOCH+1), mape_test_all_ls, c='b', label='Testing Mape')  # ls='--', marker='^',
    # # plt.xticks(range(1, EPOCH+1))
    # # plt.yticks(range(0, 110, 10))
    # # plt.ylim((0, 100))
    # plt.xlabel('Epoch')
    # plt.ylabel('Mape (%)')
    # plt.title('Mape of station-%s' % STATION_ID)
    # plt.legend(loc='best')
    # plt.tight_layout()
    # plt.savefig(path + r'/result/training_mape_%s.png' % STATION_ID, dpi=150)
    # plt.show()

    # ==== save model
    # print('saving net ...')
    # print('mao_x:', mao_x)  # mao_x: 6864
    # print('mio_x:', mio_x)  # mio_x: 1
    # print('mao_y:', mao_y)  # mao_y: 6864
    # print('mio_y:', mio_y)  # mio_y: 1
    # torch.save(lstm, 'model/single_station_model/net_lstm_%s.pkl' % STATION_ID)

    # return rmse_sta, mae_sta, mape_sta, acc_sta
    print('station id:', STATION_ID, 'training and testing mape:')
    print(mape_all_ls)
    print(mape_test_all_ls)


def main_2():
    infile3 = path + '/data/raw_data/metroStations.csv'
    station_id_df = pd.read_csv(infile3)
    station_id_df['rmse'] = -1
    station_id_df['mae'] = -1
    station_id_df['mape'] = -1
    station_id_df['acc'] = -1
    # print(station_id_df)
    station_num = len(station_id_df)
    for i in range(station_num):
        sta_id = station_id_df.iloc[i, 0]
        try:
            rmse_sta, mae_sta, mape_sta, acc_sta = main(sta_id)
            station_id_df.iloc[i, 3] = rmse_sta
            station_id_df.iloc[i, 4] = mae_sta
            station_id_df.iloc[i, 5] = mape_sta
            station_id_df.iloc[i, 6] = acc_sta
        except:
            pass

        print('dealed:', i+1, 'all:', station_num)
        station_id_df.to_csv(path + r'/result/single_station_score.csv')
    # print(station_id_df)


def test():
    infile = path + '/data/raw_data/metroData_ODflow_15.csv'
    raw_flow = pd.read_csv(infile)
    # print(raw_flow)
    print('inFlow max:', max(raw_flow[' inFlow']))  # inFlow max: 6864
    print('inFlow min:', min(raw_flow[' inFlow']))  # inFlow min: 0

    # trainData_x, trainData_y = trainDataGen(raw_flow, N_TS, N_DAY, N_WEEK)
    # trainData_x = MaxMinNorm(trainData_x)
    # trainData_y = MaxMinNorm(trainData_y)
    #
    # trainData_x = toV(trainData_x).view(len(trainData_x),1,N_TS+N_DAY+N_WEEK)
    # trainData_y = toV(trainData_y).view(len(trainData_y),1,1)
    # print(trainData_x, len(trainData_x))
    # print(trainData_y, len(trainData_y))

    # trainData_set = Data.TensorDataset(trainData_x, trainData_y)
    # trainData_loader = Data.DataLoader(
    #     dataset=trainData_set,
    #     batch_size=BATCH_SIZE,
    #     shuffle=True,
    #     num_workers=2
    # )
    #
    # for epoch in range(1):
    #     for step, (batch_x, batch_y) in enumerate(trainData_loader):
    #         print('Epoch: ', epoch, '| Step: ', step)
    #         print('batch x: ')
    #         print(batch_x)
    #         print('batch y: ')
    #         print(batch_y)


if __name__ == '__main__':
    print('system start')
    starttime = datetime.now()

    # interval = 15
    # HOUR_INTERVAL = 16
    # STATION_ID = 2011  # 2035 2011

    N_TS = 3
    N_DAY = 3
    N_WEEK = 3
    EPOCH = 50
    BATCH_SIZE = 100
    BATCH_SIZE_TEST = 5000
    LR = .01

    main(2040)
    # main_2()
    # test()

    endtime = datetime.now()
    usetime = (endtime - starttime).seconds
    h = int(usetime / 3600)
    m = int((usetime - 3600 * h) / 60)
    s = usetime - 3600 * h - 60 * m
    print('time:', h, 'h', m, 'm', s, 's')
    print('system end')

'''
113：莲花路
247:陆家嘴
2010：世纪大道
2011：莘庄
2035：人民广场
2040：东方体育中心
'''

'''
training and testing mape:
113:
[36.48793013432087, 13.717142645365152, 11.322318533292183, 10.433286523971802, 9.880445114313028, 9.494336302845905, 9.15671923221686, 8.851378802687695, 8.568314166787344, 8.304155226319264, 8.053014943232903, 7.807235591686689, 7.577226396936637, 7.382131740450859, 7.238324827108627, 7.146702171900333, 7.093529011576604, 7.055686796322847, 7.015276566529885, 6.962320466454212, 6.904663919256284, 6.8600533195795155, 6.826552500327428, 6.799931403918144, 6.775919997539276, 6.750397966840328, 6.7238127669462795, 6.697547789185475, 6.670954517829112, 6.643669870801461, 6.617340703423206, 6.594030797863618, 6.5740636334969444, 6.55649890884375, 6.540644073333496, 6.527354434514657, 6.515230706486946, 6.502315039053942, 6.486950805171942, 6.471156892486108, 6.455987004133371, 6.4423843167531185, 6.431730817525815, 6.423475746160898, 6.416839017317845, 6.410582631062239, 6.4042963947241125, 6.397312707625902, 6.389078096701549, 6.379771098876611]
[15.454241633415222, 9.69613492488861, 8.090462535619736, 7.616262882947922, 7.370759546756744, 7.27914422750473, 7.341392338275909, 7.555755227804184, 7.89998322725296, 8.217622339725494, 8.233120292425156, 7.875116169452667, 7.3130011558532715, 6.783600151538849, 6.4328789710998535, 6.222778558731079, 6.119466572999954, 6.075527518987656, 6.0422383248806, 5.986027792096138, 5.907060950994492, 5.842085927724838, 5.808011442422867, 5.798237770795822, 5.798840522766113, 5.805717781186104, 5.815184861421585, 5.8259449899196625, 5.835627391934395, 5.8435238897800446, 5.849571153521538, 5.854056030511856, 5.855939537286758, 5.855453759431839, 5.853402614593506, 5.851276591420174, 5.8508895337581635, 5.852773040533066, 5.85690438747406, 5.863163620233536, 5.870479345321655, 5.878870561718941, 5.887722969055176, 5.8967627584934235, 5.9066783636808395, 5.91837577521801, 5.932667106389999, 5.951227992773056, 5.9731025248765945, 5.9977661818265915]
247:
[101.7903745174408, 33.90249707377874, 21.330870114839993, 19.058036976135693, 17.430521777042976, 16.26082106660574, 15.41062178902137, 14.733312947627825, 14.190530929809961, 13.748057138843414, 13.356605516030239, 12.995313174831562, 12.647473964935694, 12.304960038417425, 11.96962637014878, 11.646157398055761, 11.347730553303009, 11.067797195834991, 10.800096383079504, 10.548333880993036, 10.312315678367248, 10.096064381874525, 9.900743915484501, 9.729310650473986, 9.59393173838273, 9.493848624137732, 9.429729586610428, 9.400947353778742, 9.402558780633486, 9.420081743827232, 9.443838789294928, 9.45363125930994, 9.43905373987479, 9.39980505559689, 9.331871779301228, 9.236979169341234, 9.115011770373735, 8.976218639275967, 8.831815822766377, 8.688572966135466, 8.56182825488922, 8.467553173884367, 8.406080171847956, 8.370529000575726, 8.353814511344982, 8.350041212561804, 8.357476614988768, 8.37483412753313, 8.398735790680616, 8.424846044717691]
[42.973875999450684, 21.123428642749786, 15.634015202522278, 13.656170666217804, 12.195412069559097, 10.859592258930206, 9.737591445446014, 9.109766781330109, 8.843705803155899, 8.731083571910858, 8.658485114574432, 8.591468632221222, 8.53651538491249, 8.514412492513657, 8.53492021560669, 8.59002098441124, 8.691838383674622, 8.830104023218155, 8.99915024638176, 9.183982014656067, 9.373154491186142, 9.552662074565887, 9.720449894666672, 9.888429194688797, 10.069549083709717, 10.277614742517471, 10.524878650903702, 10.807780921459198, 11.09723299741745, 11.346719413995743, 11.498615890741348, 11.511638015508652, 11.370134353637695, 11.07882633805275, 10.655438899993896, 10.115450620651245, 9.479640424251556, 8.816821128129959, 8.214028179645538, 7.731128484010696, 7.411487400531769, 7.227466255426407, 7.133498042821884, 7.087307423353195, 7.070136070251465, 7.073189318180084, 7.09415078163147, 7.1355655789375305, 7.193523645401001, 7.269126921892166]
2010:
[60.39628361662229, 21.709481473916615, 16.444029248295685, 14.619949880318764, 13.480655247202286, 12.594487135991072, 11.88420907427103, 11.271651222919806, 10.774904565933424, 10.43426541563792, 10.180717725784351, 9.938466262358885, 9.696509574468319, 9.470828937796446, 9.266784099432138, 9.09070790005036, 8.936850554667986, 8.8028212197316, 8.684651591838934, 8.578654397756626, 8.48220988917045, 8.395294405711002, 8.316457787385353, 8.243453626831373, 8.17726089213139, 8.11485221179632, 8.055098622273176, 7.99850327655291, 7.945301020756746, 7.89300836622715, 7.841533527542383, 7.788502157498629, 7.73334359893432, 7.6756705935948935, 7.61418308203037, 7.548135929764846, 7.477035077336507, 7.402703691369448, 7.3230939988906565, 7.238990660661306, 7.150308826030829, 7.056459402426695, 6.960487260650366, 6.866300363953297, 6.776908890177042, 6.694516501365563, 6.6241448028729515, 6.569789254512543, 6.534255295991898, 6.518421169274893]
[28.631767630577087, 15.425290167331696, 13.358673453330994, 12.335295975208282, 11.55392974615097, 10.89237704873085, 10.11909395456314, 9.18840691447258, 8.398296684026718, 8.019164204597473, 7.808540016412735, 7.620355486869812, 7.457544654607773, 7.328437268733978, 7.223938405513763, 7.142369449138641, 7.078826427459717, 7.026965916156769, 6.9873712956905365, 6.961103528738022, 6.948469579219818, 6.9418154656887054, 6.940755993127823, 6.9404445588588715, 6.942220777273178, 6.9419920444488525, 6.938521564006805, 6.930653750896454, 6.918714195489883, 6.903377920389175, 6.882943212985992, 6.857029348611832, 6.826193630695343, 6.791512668132782, 6.753437966108322, 6.712766736745834, 6.668689101934433, 6.620211899280548, 6.566925346851349, 6.507474184036255, 6.441043317317963, 6.365750730037689, 6.2811508774757385, 6.188300251960754, 6.090507656335831, 5.99590428173542, 5.917233973741531, 5.857108160853386, 5.820485949516296, 5.799727886915207]
2011:
[88.6106815857765, 31.860482826446876, 16.97388354402322, 11.284712510995377, 10.648451630885784, 10.064547126873945, 9.676588212068264, 9.380657426439798, 9.150282236245962, 8.977959228631777, 8.846154254980576, 8.73549590126062, 8.63957139543998, 8.5457960382486, 8.449591237765093, 8.351594840104763, 8.244218877874887, 8.122508237377192, 7.979550432318296, 7.821909653452726, 7.658329472327844, 7.499000945916543, 7.358439075641143, 7.239950199921926, 7.142042339994357, 7.063958182548865, 6.9962616341236314, 6.93420974107889, 6.873335125736701, 6.817442713639675, 6.772100447844236, 6.736933143857198, 6.709330366590084, 6.689031231097686, 6.676639520969147, 6.673266604924813, 6.678019540432172, 6.6874239307183485, 6.697306142021448, 6.705879085721114, 6.711795878333923, 6.713001496898822, 6.710408389186248, 6.704468050828347, 6.696168944621697, 6.686215207744867, 6.6751108433191595, 6.6629578574345665, 6.649586539237927, 6.635198646630997]
[60.12428402900696, 18.0927574634552, 9.468148648738861, 9.778235852718353, 9.442321956157684, 9.201852232217789, 9.005524963140488, 8.797910064458847, 8.562994748353958, 8.29642191529274, 7.993205636739731, 7.652858644723892, 7.293890416622162, 6.930626928806305, 6.604091078042984, 6.371147930622101, 6.231110170483589, 6.1858344823122025, 6.201357766985893, 6.234091520309448, 6.249641254544258, 6.243019551038742, 6.220954656600952, 6.196777895092964, 6.182534620165825, 6.192643567919731, 6.228907033801079, 6.26995712518692, 6.269863992929459, 6.224323064088821, 6.168347597122192, 6.113865226507187, 6.066500023007393, 6.0292840003967285, 6.005265191197395, 5.995277315378189, 5.993276089429855, 5.9892140328884125, 5.973653867840767, 5.943695455789566, 5.902892351150513, 5.855920165777206, 5.806519836187363, 5.759923532605171, 5.716979503631592, 5.677400901913643, 5.6407153606414795, 5.607299134135246, 5.5774010717868805, 5.550434440374374]
2035:
[67.770160925694, 21.68890239718633, 13.639967200847773, 11.562515231661308, 10.8952885445876, 10.297589424328926, 10.041405929204744, 9.826368972277029, 9.595303246990229, 9.398696953669573, 9.221097292044224, 9.048387522880848, 8.888417654312574, 8.742259643398798, 8.604773401449888, 8.474943958795988, 8.349768912945038, 8.230237911144892, 8.111680174867312, 7.992717757439002, 7.871349910512949, 7.746218202205805, 7.619798594178298, 7.49052022703183, 7.353823068432319, 7.2069486650900965, 7.061651893533194, 6.9349453044243345, 6.8390707939099045, 6.786896259738849, 6.76187603519513, 6.7422407655379715, 6.712398420159634, 6.673873359194169, 6.628876360945212, 6.579714325758127, 6.528987410740974, 6.476724749574294, 6.4245050725264425, 6.374391197012021, 6.327729891890135, 6.2823975793062115, 6.23829158452841, 6.196557501187692, 6.156970350406109, 6.11957580042191, 6.084345032771428, 6.050578294656216, 6.018421120750598, 5.988038178437796]
[29.475021362304688, 13.315972685813904, 12.15798407793045, 12.806829810142517, 12.212944030761719, 12.02433556318283, 11.834393441677094, 11.382398754358292, 10.917074978351593, 10.500023514032364, 10.117852687835693, 9.763895720243454, 9.445182979106903, 9.195597469806671, 8.974207937717438, 8.77402052283287, 8.593590557575226, 8.413662016391754, 8.225704729557037, 8.022426068782806, 7.79932364821434, 7.5538672506809235, 7.28677362203598, 6.991084665060043, 6.672428548336029, 6.353390216827393, 6.0620468109846115, 5.83590492606163, 5.711695551872253, 5.648328736424446, 5.601216480135918, 5.555041879415512, 5.510641261935234, 5.466398596763611, 5.421958118677139, 5.379252508282661, 5.339998006820679, 5.3032465279102325, 5.268074944615364, 5.235035344958305, 5.203540995717049, 5.173562839627266, 5.146435648202896, 5.120621994137764, 5.095998197793961, 5.07272407412529, 5.052809789776802, 5.034659430384636, 5.022236704826355, 5.010197684168816]
2040:
[104.87233652518346, 57.647341719040504, 33.44485492278368, 27.92536960198329, 24.50431241438939, 21.93476332303805, 21.806698120557346, 21.05648888227267, 20.308623061730312, 19.657047933492905, 19.039829151752667, 18.520556390285492, 18.287770679363838, 18.316579094299904, 18.447067187382626, 18.570939699808758, 18.65061437472319, 18.69147335871672, 18.708113676462418, 18.70826964194958, 18.693009592019596, 18.663076368662026, 18.61874289237536, 18.559223184218773, 18.488332285330845, 18.40860060392282, 18.328418487157577, 18.2682291055337, 18.221052793356087, 18.158783859167343, 18.09383852359576, 18.039343257745106, 17.98973350952833, 17.939574749041828, 17.88480820564123, 17.826416247930283, 17.767389997457848, 17.709741607690468, 17.658100792994865, 17.61673345015599, 17.58358176702108, 17.55948265393575, 17.549934677588634, 17.54861145447462, 17.544552034292465, 17.535697726102974, 17.524779836336773, 17.512494249221607, 17.498558224775852, 17.483628140046047]
[54.43044900894165, 52.76622772216797, 31.30592405796051, 23.502573370933533, 19.023115932941437, 20.71869820356369, 21.182923018932343, 21.861381828784943, 22.65864908695221, 22.72830456495285, 21.598660945892334, 20.126016438007355, 19.42594200372696, 19.189605116844177, 19.06527578830719, 18.9446821808815, 18.81309449672699, 18.666693568229675, 18.497653305530548, 18.301519751548767, 18.085137009620667, 17.846068739891052, 17.59377270936966, 17.333456873893738, 17.069168388843536, 16.82122051715851, 16.617532074451447, 16.464021801948547, 16.393455862998962, 16.368108987808228, 16.353900730609894, 16.338665783405304, 16.325171291828156, 16.32290780544281, 16.33545458316803, 16.362659633159637, 16.403694450855255, 16.45943820476532, 16.525660455226898, 16.594748198986053, 16.653616726398468, 16.69251024723053, 16.708138585090637, 16.707439720630646, 16.69694483280182, 16.678300499916077, 16.653716564178467, 16.623614728450775, 16.587667167186737, 16.546031832695007]

'''